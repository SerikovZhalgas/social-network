{"version":3,"file":"static/js/187.19f6cee4.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hok/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__yaJjR\",\"dialogsItems\":\"Dialogs_dialogsItems__wYroA\",\"dialog\":\"Dialogs_dialog__5ldIV\",\"activeLink\":\"Dialogs_activeLink__xm1NE\",\"active\":\"Dialogs_active__oGqcY\",\"messages\":\"Dialogs_messages__oiImn\",\"messagesMe\":\"Dialogs_messagesMe__j-wNh\",\"messagesAnother\":\"Dialogs_messagesAnother__8wsZc\",\"messagesAvatar\":\"Dialogs_messagesAvatar__ximmo\",\"friendImg\":\"Dialogs_friendImg__TEjiM\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogItemType} from \"../../../Redux/store\";\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img className={s.friendImg} src={props.avatar} alt=\"avatar\"/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../Redux/store\";\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    const message = props.myMessage\r\n        ? <div className={s.messagesMe}><span>{props.message}</span><img className={s.messagesAvatar} src={props.avatar} alt='MyAvatar'/></div>\r\n        : <div className={s.messagesAnother}><img className={s.messagesAvatar} src={props.avatar} alt='AnotherAvatar'/><span>{props.message}</span></div>\r\n\r\n    return (\r\n        <div className={s.messages}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nexport type DialogFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<DialogFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newMessageBody\"\r\n                    placeholder=\"Enter your message\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<DialogFormDataType>({form:\"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPagePropsType} from \"./DialogsContainer\";\r\nimport AddMessageForm, {DialogFormDataType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props: DialogsPagePropsType) => {\r\n    const state = props.messagePage\r\n\r\n    const dialogsElements =  state.dialogsData.map(d => <DialogItem id={d.id} name={d.name} avatar={d.avatar}/>)\r\n    const messageElements = state.messageData.map(m => <Message id={m.id} message={m.message} myMessage={m.myMessage} avatar={m.avatar}/>)\r\n\r\n    const addNewMessage = (formData: DialogFormDataType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStoreType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStoreType): MapStatePropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props:MapStatePropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to='login'/>\r\n            return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import {ComponentType} from 'react';\r\nimport {InitialStateType, sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport {AppStoreType} from \"../../Redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    messagePage: InitialStateType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type  DialogsPagePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStoreType): MapStatePropsType => {\r\n    return {\r\n        messagePage: state.messagePage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React from \"react\";\r\nimport styles from './FormControls.module.css'\r\nimport {Field, Validator} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error, ...restProps}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: Array<Validator>, component: (props: any) => JSX.Element,props ={}, text: string|null = '') => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={Input}\r\n                {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if(value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number) => (value: string) => {\r\n    if(value.length > maxValue) {\r\n        return `Max length is ${maxValue} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__A6Htx\",\"error\":\"FormControls_error__ilB5R\",\"formSummaryError\":\"FormControls_formSummaryError__BPQTm\"};"],"names":["props","path","id","className","s","src","avatar","alt","to","name","message","myMessage","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","messagePage","dialogsElements","dialogsData","map","d","messageElements","messageData","m","formData","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps","Dialogs","FormControl","input","meta","touched","error","children","hasError","styles","child","Input","createField","validators","text","value","maxValue","length"],"sourceRoot":""}