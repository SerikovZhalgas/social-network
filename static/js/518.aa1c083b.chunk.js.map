{"version":3,"file":"static/js/518.aa1c083b.chunk.js","mappings":"8OAIaA,EAAkDC,EAAAA,G,mBCuCzDC,GAAiBC,EAAAA,EAAAA,GAAuC,CAACC,KAAK,SAA7CD,EArBqE,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAE/G,OACI,kBAAMC,SAAUH,EAAhB,WACKI,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAUC,EAAAA,GAAM,GAAI,OACnDF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAUC,EAAAA,GAAM,CAACC,KAAM,YAAa,OACzEH,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAGE,EAAAA,GAAM,CAACC,KAAM,YAAa,eAE7DL,IAAc,gBAAKM,IAAKN,EAAYO,IAAI,YACxCP,IAAcE,EAAAA,EAAAA,IAAY,qBAAsB,UAAW,CAACC,EAAAA,GAAUC,EAAAA,GAAM,IAE5EL,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SACLV,KAEL,0BACI,8CA4BhB,EApBc,WAEV,IAAMW,EAASjB,GAAe,SAAAkB,GAAK,OAAIA,EAAMC,KAAKF,UAC5CV,EAAaP,GAAe,SAAAkB,GAAK,OAAIA,EAAMC,KAAKZ,cAChDa,GD9C0BC,EAAAA,EAAAA,MCoDhC,OAAGJ,GACQ,SAAC,KAAD,CAAUK,GAAI,cAGlB,4BACH,mCACA,SAACpB,EAAD,CAAgBM,SAVH,SAACe,GACd,iBAAmDA,GAA5CC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,WAAYC,EAApC,EAAoCA,QACpCP,GAASQ,EAAAA,EAAAA,IAAMJ,EAAOC,EAAUC,EAAYC,KAQRpB,WAAYA,S,iPCzDlDsB,EAAc,SAAC,GAAiE,EAAhEC,MAAiE,IAAD,IAAzDC,KAAOC,EAAkD,EAAlDA,QAAS1B,EAAyC,EAAzCA,MAAsB2B,IAAmB,cAAnBA,UACzDC,EAAWF,GAAW1B,EAC5B,OACI,iBAAKS,UAAWoB,EAAAA,EAAAA,YAAqB,KAAOD,EAAWC,EAAAA,EAAAA,MAAe,IAAtE,WACI,yBACKF,IAEJC,IAAY,0BAAO5B,QAKnB8B,EAAW,SAACC,GACrB,IAAOP,EAAoCO,EAApCP,MAAuBQ,GAAaD,EAA7BN,KAA6BM,EAAvBE,OAApB,OAA2CF,EAA3C,IACA,OAAO,SAACR,GAAD,kBAAiBQ,GAAjB,cAAwB,uCAAcP,GAAWQ,QAG/C3B,EAAQ,SAAC0B,GAClB,IAAOP,EAAoCO,EAApCP,MAAuBQ,GAAaD,EAA7BN,KAA6BM,EAAvBE,OAApB,OAA2CF,EAA3C,IACA,OAAO,SAACR,GAAD,kBAAiBQ,GAAjB,cAAwB,oCAAWP,GAAWQ,QAG5C7B,EAAc,SAAC+B,EAA4BC,EAAcC,EAA8BC,GAA8E,IAAvCN,EAAsC,uDAA/B,GAAIO,EAA2B,uDAAP,GACtK,OACI,4BACI,SAAC,KAAD,QACIJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWhC,GACP0B,IACLO,O,4ECnCR,IAAMlC,EAAW,SAACoC,GACrB,IAAGA,EAGH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAsB,SAACF,GACnD,GAAGA,EAAMG,OAASD,EACd,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCRR,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["Redux/hooks.ts","components/Login/LoginPage.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"./redux-store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { required } from '../../utils/validators/validators';\r\nimport {createField, Input} from \"../common/FormControls/FormControls\";\r\nimport {login} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/hooks\";\r\nimport style from \"../common/FormControls/FormControls.module.css\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    error: string\r\n    captcha: null\r\n}\r\n\r\ntype LoginPageType = {\r\n    captchaUrl: null | string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginPageType> & LoginPageType> = ({handleSubmit, error, captchaUrl}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required],Input,{}, null)}\r\n            {createField('Password', 'password', [required],Input,{type: 'password'}, null)}\r\n            {createField(null, 'rememberMe', [],Input,{type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n            {captchaUrl && createField(\"Symbols from image\", 'captcha', [required],Input,{})}\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginPageType>({form:'login'})(LoginForm)\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n    const captchaUrl = useAppSelector(state => state.auth.captchaUrl)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe, captcha} = {...formData}\r\n        dispatch(login(email, password, rememberMe, captcha))\r\n    }\r\n    if(isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nexport default Login","import React from \"react\";\r\nimport styles from './FormControls.module.css'\r\nimport {Field, Validator} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error, ...restProps}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: Array<Validator>, component: (props: any) => JSX.Element,props ={}, text: string|null = '') => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={Input}\r\n                {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if(value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number) => (value: string) => {\r\n    if(value.length > maxValue) {\r\n        return `Max length is ${maxValue} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__A6Htx\",\"error\":\"FormControls_error__ilB5R\",\"formSummaryError\":\"FormControls_formSummaryError__BPQTm\"};"],"names":["useAppSelector","useSelector","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","createField","required","Input","type","src","alt","className","style","isAuth","state","auth","dispatch","useDispatch","to","formData","email","password","rememberMe","captcha","login","FormControl","input","meta","touched","children","hasError","styles","Textarea","props","restProps","child","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxValue","length"],"sourceRoot":""}