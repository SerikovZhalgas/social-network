{"version":3,"file":"static/js/518.5dddc704.chunk.js","mappings":"wPAIaA,EAAkDC,EAAAA,G,8CC8BzDC,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAK,SAA9BD,EAjBsC,SAAC,GAAyC,IAAxCE,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,OAAyB,YAElG,OACI,kBAAMC,SAAUF,EAAhB,WACKG,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAU,GAAI,OAC7CD,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAU,CAACC,KAAM,YAAa,OACnEF,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAG,CAACE,KAAM,YAAa,eACvDJ,IAAS,gBAAKK,UAAWC,EAAAA,EAAAA,iBAAhB,SACLN,KAEL,0BACI,8CA2BhB,EAnBc,WAEV,IAAMO,EAASb,GAAe,SAAAc,GAAK,OAAIA,EAAMC,KAAKF,UAC5CG,GDpC0BC,EAAAA,EAAAA,MC0ChC,OAAGJ,GACQ,SAAC,KAAD,CAAUK,GAAI,cAGlB,4BACH,mCACA,SAAChB,EAAD,CAAgBK,SAVH,SAACY,GACd,iBAA0CA,GAAnCC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,WACxBN,GAASO,EAAAA,EAAAA,IAAMH,EAAOC,EAAUC,Y,yNCvClCE,EAAc,SAAC,GAAiE,EAAhEC,MAAiE,IAAD,IAAzDC,KAAOC,EAAkD,EAAlDA,QAASrB,EAAyC,EAAzCA,MAAsBsB,IAAmB,cAAnBA,UACzDC,EAAWF,GAAWrB,EAC5B,OACI,iBAAKK,UAAWmB,EAAAA,EAAAA,YAAqB,KAAOD,EAAWC,EAAAA,EAAAA,MAAe,IAAtE,WACI,yBACKF,IAEJC,IAAY,0BAAOvB,QAKnByB,EAAW,SAACC,GACrB,IAAOP,EAAoCO,EAApCP,MAAuBQ,GAAaD,EAA7BN,KAA6BM,EAAvBE,OAApB,OAA2CF,EAA3C,IACA,OAAO,SAACR,GAAD,kBAAiBQ,GAAjB,cAAwB,uCAAcP,GAAWQ,QAG/CE,EAAQ,SAACH,GAClB,IAAOP,EAAoCO,EAApCP,MAAuBQ,GAAaD,EAA7BN,KAA6BM,EAAvBE,OAApB,OAA2CF,EAA3C,IACA,OAAO,SAACR,GAAD,kBAAiBQ,GAAjB,cAAwB,oCAAWP,GAAWQ,QAG5CzB,EAAc,SAAC4B,EAA4BC,EAAcC,GAAqE,IAAvCN,EAAsC,uDAA/B,GAAIO,EAA2B,uDAAP,GAC/H,OACI,4BACI,SAAC,KAAD,QACIH,YAAaA,EACbC,KAAMA,EACNG,SAAUF,EACVG,UAAWN,GACPH,IACLO,O,4ECjCR,IAAM9B,EAAW,SAACiC,GACrB,IAAGA,EAGH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAsB,SAACF,GACnD,GAAGA,EAAMG,OAASD,EACd,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCVR,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["Redux/hooks.ts","components/Login/LoginPage.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d"],"sourcesContent":["import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"./redux-store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { required } from '../../utils/validators/validators';\r\nimport {createField} from \"../common/FormControls/FormControls\";\r\nimport {login} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/hooks\";\r\nimport style from \"../common/FormControls/FormControls.module.css\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error, ...restProps}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required],{}, null)}\r\n            {createField('Password', 'password', [required],{type: 'password'}, null)}\r\n            {createField(null, 'rememberMe', [],{type: 'checkbox'}, 'remember me')}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form:'login'})(LoginForm)\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe} = {...formData}\r\n        dispatch(login(email, password, rememberMe))\r\n    }\r\n    if(isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nexport default Login","import React from \"react\";\r\nimport styles from './FormControls.module.css'\r\nimport {Field, Validator} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error, ...restProps}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: Array<Validator>, props ={}, text: string|null = '') => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={Input}\r\n                {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const required = (value: string) => {\r\n    if(value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number) => (value: string) => {\r\n    if(value.length > maxValue) {\r\n        return `Max length is ${maxValue} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__A6Htx\",\"error\":\"FormControls_error__ilB5R\",\"formSummaryError\":\"FormControls_formSummaryError__BPQTm\"};"],"names":["useAppSelector","useSelector","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","type","className","style","isAuth","state","auth","dispatch","useDispatch","to","formData","email","password","rememberMe","login","FormControl","input","meta","touched","children","hasError","styles","Textarea","props","restProps","child","Input","placeholder","name","validators","text","validate","component","value","maxLengthCreator","maxValue","length"],"sourceRoot":""}