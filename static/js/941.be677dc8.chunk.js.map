{"version":3,"file":"static/js/941.be677dc8.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormControls.module.css?7a3d","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__l6-8N\",\"posts\":\"MyPosts_posts__Qgrk3\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__RX5g+\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PropsType} from \"../../../../Redux/store\";\r\n\r\nconst Post = (props: PropsType) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img src=\"https://www.vokrug.tv/pic/product/6/a/0/b/6a0bbf9e1e4b3c4564c562f91c6d43ec.jpeg\" alt='avatar'/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like</span> {props.likesCount}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfilePagePropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: ProfilePagePropsType) => {\r\n    console.log('MyPostsRendered')\r\n    const state = props.profilePage\r\n\r\n    let PostsElements = state.posts.map((p, i) => <Post key={i} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const addNewPostText = (formData: FormDataType) => {\r\n        props.addMyPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostTextRedux onSubmit={addNewPostText}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {PostsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newPostText\"\r\n                    validate={[required, maxLength10]}\r\n                    placeholder=\"Post message\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostTextRedux = reduxForm<FormDataType>({form:\"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../Redux/profile-reducer\";\r\nimport {AppStoreType} from \"../../../Redux/redux-store\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType} from \"../../../Redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMyPost: (newPostText: string)=>void\r\n}\r\nexport type  ProfilePagePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state:AppStoreType):MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMyPost: (newPostText: string)=>{\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__ApKsI\",\"img\":\"ProfileInfo_img__bcFyx\",\"mainPhoto\":\"ProfileInfo_mainPhoto__NkNex\",\"contact\":\"ProfileInfo_contact__ObFof\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus:(newStatus:string)=>void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputValue, setInputValue] = useState<string>(props.status)\r\n\r\n    useEffect(()=>{\r\n        setInputValue(props.status)\r\n    },[props.status])\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>)=> {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n    const onDoubleClick = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n    const onBlurHandler = () => {\r\n        setEditMode(!editMode)\r\n        props.updateUserStatus(inputValue)\r\n    }\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ?\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        value={inputValue}\r\n                        onBlur={onBlurHandler}\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                </div>\r\n                :\r\n                <div>\r\n                    <b>Status: </b>\r\n                    <span onDoubleClick={onDoubleClick}>\r\n                        {props.status}\r\n                    </span>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileStatus;","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ProfileDataForm_contact__ZAPMa\",\"formSummaryError\":\"ProfileDataForm_formSummaryError__ZhSpF\"};","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormControls/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfilePageType} from \"../../../../Redux/profile-reducer\";\r\nimport s from './ProfileDataForm.module.css'\r\n\r\nexport type PropsType = {\r\n    profile: ProfilePageType\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfilePageType, PropsType> & PropsType> = ({\r\n                                                                                                                         handleSubmit,\r\n                                                                                                                         profile,\r\n                                                                                                                         error\r\n                                                                                                                     }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <button>save</button>\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {createField('Full name', \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField('', \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional\r\n                skills</b>: {createField('My professional skills', \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField('About me', \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map((e, i) => {\r\n            return <div key={i} className={s.contact}>\r\n                <b>{e}: </b> {createField(e, \"contacts.\" + e, [], Input)}\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfilePageType, PropsType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePageType} from \"../../../Redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport userPhoto from './../../../assets/images/anonymous-user-flat-icon-vector-18958259.png'\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    isOwner: boolean\r\n    profile: ProfilePageType | null\r\n    status: string\r\n    updateUserStatus: (newStatus: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: Partial<ProfilePageType>) => Promise<void>\r\n}\r\n\r\nconst ProfileInfo = ({isOwner, profile, status, updateUserStatus, savePhoto, saveProfile}: ProfileInfoType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfilePageType) => {\r\n        saveProfile(formData).then(()=>{\r\n            setEditMode(!editMode)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt=\"ava\" className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={mainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=>setEditMode(!editMode)}/>}\r\n\r\n                <ProfileStatus\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfilePageType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map((e, i) => {\r\n            return <Contact key={i} contactTitle={e}\r\n                            contactValue={profile.contacts[e as keyof typeof profile.contacts]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfilePageType} from \"../../Redux/profile-reducer\";\r\n\r\ntype ProfileType = {\r\n    isOwner: boolean\r\n    profile: ProfilePageType | null\r\n    status: string\r\n    updateUserStatus:(newStatus:string)=>void\r\n    savePhoto: (file: File)=>void\r\n    saveProfile: (formData: Partial<ProfilePageType>)=>Promise<void>\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateUserStatus={props.updateUserStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\nexport default Profile;","import React, {ComponentType} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStoreType} from \"../../Redux/redux-store\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    ProfilePageType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatus\r\n} from \"../../Redux/profile-reducer\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<any> {\r\n\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    profile={this.props.profile}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfilePageType | null\r\n    status: string\r\n    authorizedUserId: null | number\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (newStatus: string) => void\r\n}\r\n\r\nexport type ProfileContainerPageType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStoreType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)","import React from \"react\";\r\nimport styles from './FormControls.module.css'\r\nimport {Field, Validator} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error, ...restProps}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: Array<Validator>, component: (props: any) => JSX.Element,props ={}, text: string|null = '') => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={Input}\r\n                {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}","export const required = (value: string) => {\r\n    if(value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number) => (value: string) => {\r\n    if(value.length > maxValue) {\r\n        return `Max length is ${maxValue} symbols`\r\n    }\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__A6Htx\",\"error\":\"FormControls_error__ilB5R\",\"formSummaryError\":\"FormControls_formSummaryError__BPQTm\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","className","s","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","console","log","PostsElements","profilePage","posts","map","p","i","id","AddNewPostTextRedux","onSubmit","formData","addMyPost","newPostText","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","connect","state","dispatch","addPostActionCreator","useState","editMode","setEditMode","status","inputValue","setInputValue","useEffect","autoFocus","value","onBlur","updateUserStatus","onChange","e","currentTarget","onDoubleClick","ProfileDataFormReduxForm","profile","error","createField","Input","type","Object","keys","contacts","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","photos","large","userPhoto","target","files","length","initialValues","then","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","FormControl","input","meta","touched","children","hasError","styles","restProps","child","validators","text","maxValue","_slicedToArray","arr","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}